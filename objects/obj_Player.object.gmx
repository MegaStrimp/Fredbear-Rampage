<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Null</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Player_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Controls

key_left = ord("A");
key_right = ord("D");
key_up = ord("W");
key_down = ord("S");
keyRun = vk_shift;

//Physics

friction = 1;
spd = 6;
runSpd = 2;
hsp = 0;
vsp = 0;

//Character Variables

character = global.character;
sprLeft = spr_Null;
sprRight = spr_Null;
sprUp = spr_Null;
sprDown = spr_Null;
hasSound = true;
talkSound1 = snd_Freddy_Gameplay1;
talkSound2 = snd_Freddy_Gameplay2;
talkSound3 = snd_Freddy_Gameplay3;

//Other Variables

if (global.hp == 0) global.hp = global.hpMax;
hpBar = global.hp;
knockbackResistance = .2;
hurt = false;
invisFrames = 30;
invisTimer = 0;
invisTimerIncrease = 10;
run = false;
animIndex = 3;
enterPortal = false;

//Create Objects

weaponObj = instance_create(x,y,obj_PlayerWeapon);
weaponObj.owner = id;
createCamera = instance_create(x,y,obj_Camera);
createCamera.owner = id;
instance_create(x,y,obj_Cursor);

//Alarms

alarm_Hurt = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Characters

scr_Characters();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main

//Movement

if (keyboard_check(keyRun))
{
    run = true;
}
else
{
    run = false;
}
hsp = (-keyboard_check(key_left) + keyboard_check(key_right)) * (spd + (runSpd * run));
vsp = (-keyboard_check(key_up) + keyboard_check(key_down)) * (spd + (runSpd * run));

//Collision

if (place_meeting(x+hsp,y,obj_Wall))
{
    while (!place_meeting(x+sign(hsp),y,obj_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

if (place_meeting(x,y+vsp,obj_Wall))
{
    while (!place_meeting(x,y+sign(vsp),obj_Wall))
    { 
        y += sign(vsp);
    }
    vsp = 0;
}

//Speed Collision

if (place_meeting(x,y+speed,obj_Wall)) or (place_meeting(x+speed,y,obj_Wall))
{
    speed = 0;
}

//Animation

if keyboard_check(key_left)
{
    animIndex = 0;
}
if keyboard_check(key_right)
{
    animIndex = 1;
}
if keyboard_check(key_up)
{
    animIndex = 2;
}
if keyboard_check(key_down)
{
    animIndex = 3;
}

if animIndex = 0
{
    spriteIndex = sprLeft;
}
if animIndex = 1
{
    spriteIndex = sprRight;
}
if animIndex = 2
{
    spriteIndex = sprUp;
}
if animIndex = 3
{
    spriteIndex = sprDown;
}

sprite_index = spriteIndex;

//Position

if (speed == 0)
{
    x += hsp;
    y += vsp;
}

//Image Speed

if (hsp == 0 and vsp == 0 and speed == 0)
{
    image_speed = 0;
}
else
{
    image_speed = .1 + (.1 * run);
}

//Clamp

x = clamp(x,0,room_width);
y = clamp(y,0,room_height);
global.hp = clamp(global.hp,0,global.hpMax);

//Hit

if ((place_meeting(x,y,obj_DamagesPlayer)) and (!enterPortal))
{
    var hitBullet = instance_place(x,y,obj_DamagesPlayer);
    if (!hurt)
    {
        if (global.hp &gt; hitBullet.damage)
        {
            audio_play_sound(snd_RobotHit,0,false);
            if ((instance_exists(obj_Camera)) and (instance_exists(obj_LevelControl))) obj_Camera.shake += 4 + round(obj_LevelControl.combo * .5);
        }
        else
        {
            audio_play_sound(snd_RobotHit,0,false);
            audio_play_sound(snd_EnemyDie,0,false);
            if ((instance_exists(obj_Camera)) and (instance_exists(obj_LevelControl))) obj_Camera.shake += 8 + round(obj_LevelControl.combo * .5);
            var corpse = instance_create(x,y,obj_EnemyCorpse);
            corpse.sprite_index = sprDeath;
            corpse.depth = depth;
            instance_destroy();
            instance_create(x,y,obj_GameOver);
        }
        global.hp -= hitBullet.damage;
        direction = -point_direction(x,y,hitBullet.x,hitBullet.y);
        if (distance_to_object(instance_nearest(x,y,obj_Wall)) &gt; hitBullet.knockback + 1) speed += hitBullet.knockback;
        hurt = true;
        invisFrames = hitBullet.invisFrames;
        alarm_Hurt = invisFrames;
        hitBullet.pierceCount -= 1;
    }
    if (hitBullet.destroyable)
    {
        if (hitBullet.pierceCount &lt;= 0) instance_destroy(hitBullet);
    }
}

//Hurt

if (hurt)
{
    invisTimer += invisTimerIncrease;
    if (invisTimer &lt;= 30)
    {
        image_alpha = 0;
    }
    if (invisTimer &gt; 30)
    {
        image_alpha = 1;
    }
    if (invisTimer &gt; 60) invisTimer -= 60;
}
else
{
    invisTimer = 0;
    image_alpha = 1;
}

//Healthbar

hpBar = lerp(hpBar,global.hp,.1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarms

//Disable Hurt

if(alarm_Hurt != -1)
{
    alarm_Hurt = max(0,alarm_Hurt-1);
    if(alarm_Hurt == 0)
    {
        hurt = false;
        alarm_Hurt = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//Draw Self

draw_self();

//Healthbar

draw_sprite_ext(spr_Healthbar_Border,0,x - sprite_get_width(spr_Healthbar_Border)/2,y - (sprite_get_height(maskIndex)/2) - 12,1,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_Bg,0,x - sprite_get_width(spr_Healthbar_Bg)/2,y - (sprite_get_height(maskIndex)/2) - 12,1,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_InnerDark,1,x - sprite_get_width(spr_Healthbar_InnerDark)/2,y - (sprite_get_height(maskIndex)/2) - 12,hpBar/global.hpMax,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_Inner,1,x - sprite_get_width(spr_Healthbar_Inner)/2,y - (sprite_get_height(maskIndex)/2) - 12,global.hp/global.hpMax,1,image_angle,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
