<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//View Size

obj_display_manager.ideal_width=405;
obj_display_manager.ideal_height=270;
if(obj_display_manager.ideal_width &amp; 1) obj_display_manager.ideal_width++;
if(obj_display_manager.ideal_height &amp; 1) obj_display_manager.ideal_height++;
obj_display_manager.display_width=display_get_width();
obj_display_manager.display_height=display_get_height();
obj_display_manager.aspect_ratio=obj_display_manager.display_width/obj_display_manager.display_height;
obj_display_manager.aspect_ratio=obj_display_manager.display_width/obj_display_manager.display_height;
surface_resize(application_surface,obj_display_manager.ideal_width*obj_display_manager.zoom,obj_display_manager.ideal_height*obj_display_manager.zoom);

//Other Variables

view_zoom = 1;
spd = 1.05;
state = 0;
shake = 0;
yPos = 0;
viewRot = 0;
viewRotMagolor = 0;
viewXview = view_xview;
viewYview = view_yview;

//Alarms

alarm_OpeningVertical = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View Following

if global.hp &gt; 0
{
    if (room == rm_Starcutter)
    {
        view_wview = obj_display_manager.ideal_width/view_zoom;
        view_hview = obj_display_manager.ideal_height/view_zoom;
        
        //Center on player
        viewXview=x-view_wview/2;
        viewYview=y-view_hview/2-72;
        
        //clamp to room
        viewXview=clamp(viewXview,0,room_width-view_wview);
        viewYview=clamp(viewYview,0,room_height-view_hview);
        
        view_xview = viewXview+random_range(-shake,shake);
        view_yview = viewYview+random_range(-shake,shake);
    }
    else
    {
        view_wview = obj_display_manager.ideal_width/view_zoom;
        view_hview = obj_display_manager.ideal_height/view_zoom;
        
        //Center on player
        viewXview=x-view_wview/2;
        viewYview=y-view_hview/2-24;
        
        //clamp to room
        viewXview=clamp(viewXview,0,room_width-view_wview);
        viewYview=clamp(viewYview,0,room_height-view_hview);
        
        view_xview = viewXview+random_range(-shake,shake);
        view_yview = viewYview+random_range(-shake,shake);
    }
}
view_angle = viewRot + viewRotMagolor;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarms

if(alarm_OpeningVertical!=-1)
{
    alarm_OpeningVertical=max(0,alarm_OpeningVertical-1);
    if(alarm_OpeningVertical==0)
    {
        state = 4;
        alarm_OpeningVertical=-1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main

if (state == 0)
{
    if instance_exists(obj_Kirby)
    {
        x += (obj_Kirby.x - x) * spd;
        y += (obj_Kirby.y - y) * spd;
        if (room == rm_GreenGreens1) and (obj_Kirby.state != states.warpstar)
        {
            x = clamp(x,0,688)
        }
        if (room == rm_GreenGreens5)
        {
            if (instance_exists(obj_Whispy_Face)) y = lerp(y,696,.05);
            x = room_width;
            if (instance_exists(obj_Whispy_Face)) spd = 0;
        }
    }
}

if (state == 1)
{
    if instance_exists(obj_Cutscene_Kirby1)
    {
        x += (obj_Cutscene_Kirby1.x - x) * spd;
        y += (obj_Cutscene_Kirby1.y - y) * spd;
    }
}

if (state == 2)
{
    if instance_exists(obj_Cutscene_Kirby2)
    {
        x += (obj_Cutscene_Kirby2.x - x) * spd;
        y += (obj_Cutscene_Kirby2.y - y) * spd;
    }
}

if (state == 3)
{
    x += 1;
    if (y &lt; obj_Cutscene_Dedede1.y) y += 1;
}

if (state == 4)
{
    x += .25;
    y -= 1;
}

if (state == 5)
{
    if instance_exists(obj_Cutscene_Kirby3)
    {
        x += (obj_Cutscene_Kirby3.x - x) * spd;
        y += (obj_Cutscene_Kirby3.y - y) * spd;
    }
}

if (state == 6)
{
    y -= 2;
}

if (state == 7)
{
    if instance_exists(obj_Cutscene_Kirby5)
    {
        x += (obj_Cutscene_Kirby5.x - x) * spd;
        y += (obj_Cutscene_Kirby5.y - y) * spd;
    }
}

if (state == 8)
{
    if instance_exists(obj_Cutscene_Kirby6)
    {
        x += (obj_Cutscene_Kirby6.x - x) * spd;
        y += (obj_Cutscene_Kirby6.y - y) * spd;
    }
}

if (state == 9)
{
    if instance_exists(obj_warpstar_exiting)
    {
        x += (obj_warpstar_exiting.x - x) * spd;
        y += (obj_warpstar_exiting.y - y) * spd;
    }
}

if (state == 10)
{
    if instance_exists(obj_GalaxyMap_Kirby)
    {
        x += (obj_GalaxyMap_Kirby.x - x) * spd;
        y += (obj_GalaxyMap_Kirby.y - y) * spd;
    }
}

if (state == 11)
{
    if instance_exists(obj_Starcutter_Control)
    {
        x += (obj_Starcutter_Control.x - x) * spd;
        y += (obj_Starcutter_Control.y - y) * spd;
    }
}

if (state == 12)
{
    x = lerp(x,432,spd);
    if (instance_exists(obj_Kirby)) y += (obj_Kirby.y - y) * spd;
}

if (state == 13)
{
    x = lerp(x,1800,spd);
    if (instance_exists(obj_Kirby)) y += (obj_Kirby.y - y) * spd;
}

if (state == 14)
{
    x = lerp(x,1392,spd);
    if (instance_exists(obj_Kirby)) y += (obj_Kirby.y - y) * spd;
}

if (state == 15)
{
    x = lerp(x,obj_Cutscene_Kirby7,spd) + irandom_range(-shake,shake);
    y = lerp(y,obj_Cutscene_Kirby7,spd) + irandom_range(-shake,shake);
}

if (state == 16)
{
    if instance_exists(obj_Cutscene_Kirby9)
    {
        x += (obj_Cutscene_Kirby9.x - x) * spd;
        y += (obj_Cutscene_Kirby9.y - y) * spd;
    }
}
if (shake != 0) shake -= .2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
