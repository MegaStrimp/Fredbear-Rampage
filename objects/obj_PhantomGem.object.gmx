<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PhantomGemG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Wave Variables

anchorY = y;
frequency = 0.1;
amplitude = 6;
timer = 0;

//Other Variables

scale = 2;
image_xscale = scale;
image_yscale = scale;
alphaSpd = .005;
hpMax = 20;
hp = hpMax;
hpBar = hpMax;
hurt = false;
invisFrames = 30;
invisTimer = 0;
invisTimerIncrease = 10;
death = false;
progress = 1;
maskIndex = sprite_index;
unlockVariable = global.unlockedMetalPartyHat;
unlockText = "Metal#Party Hat";

//Alarms

alarm_Setup = 1;
alarm_Hurt = -1;
alarm_Particle = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main

//Wave

y = anchorY + sin(timer*frequency)*amplitude;
timer++;

//Hit

if (place_meeting(x,y,obj_DamagesEnemy)) and (!death)
{
    var bullet = instance_place(x,y,obj_DamagesEnemy);
    if (!hurt)
    {
        if (hp &gt; bullet.damage)
        {
            hp -= bullet.damage;
            audio_play_sound(snd_GemHit,0,false);
            if ((instance_exists(obj_Camera)) and (instance_exists(obj_LevelControl))) obj_Camera.shake += 1 + round(obj_LevelControl.combo * .5);
        }
        else
        {
            audio_play_sound(snd_GemHit,0,false);
            if ((instance_exists(obj_Camera)) and (instance_exists(obj_LevelControl))) obj_Camera.shake += 2 + round(obj_LevelControl.combo * .5);
            hp -= bullet.damage;
            //death = true;
        }
        hurt = true;
        invisFrames = bullet.invisFrames;
        alarm_Hurt = invisFrames;
        bullet.pierceCount -= 1;
    }
    if (bullet.destroyable)
    {
        if (bullet.pierceCount &lt;= 0) instance_destroy(bullet);
    }
}

//Hurt

if (!death)
{
    if (hurt)
    {
        invisTimer += invisTimerIncrease;
        if (invisTimer &lt;= 30)
        {
            image_index = 1;
        }
        if (invisTimer &gt; 30)
        {
            image_index = 0;
        }
        if (invisTimer &gt; 60) invisTimer -= 60;
    }
    else
    {
        invisTimer = 0;
        image_index = 0;
    }
}

//Death

if (hp &lt;= 0) death = true;

if (death)
{
    image_alpha -= alphaSpd;
    if (alarm_Particle == -1) alarm_Particle = 7;
    if (instance_exists(obj_EnemySpawner_Level)) instance_destroy(obj_EnemySpawner_Level);
    if (image_alpha &lt;= 0)
    {
        var portal = instance_create(x,y,obj_Portal);
        portal.Room = rm_Overworld1;
        portal.b = 0.01;
        portal.text = "Go back#to hub";
        var titleCard = instance_create(0,0,obj_LevelTitle);
        titleCard.levelOrder = "";
        titleCard.levelTitle = "";
        if (unlockVariable)
        {
            titleCard.levelDescription = "Success!!!";
        }
        else
        {
            titleCard.levelDescription = "Success!!!##!Unlocked " + string(unlockText) + "!";
            if (unlockVariable == global.unlockedFreddy) global.unlockedFreddy = true;
            if (unlockVariable == global.unlockedBonnie) global.unlockedBonnie = true;
            if (unlockVariable == global.unlockedChica) global.unlockedChica = true;
            if (unlockVariable == global.unlockedFoxy) global.unlockedFoxy = true;
            if (unlockVariable == global.unlockedFredbear) global.unlockedFredbear = true;
            if (unlockVariable == global.unlockedBalloonBoy) global.unlockedBalloonBoy = true;
            if (unlockVariable == global.unlockedMangle) global.unlockedMangle = true;
            if (unlockVariable == global.unlockedPuppet) global.unlockedPuppet = true;
            if (unlockVariable == global.unlockedPartyHat) global.unlockedPartyHat = true;
            if (unlockVariable == global.unlockedBalloon) global.unlockedBalloon = true;
            if (unlockVariable == global.unlockedMetalFreddy) global.unlockedMetalFreddy = true;
            if (unlockVariable == global.unlockedMetalBonnie) global.unlockedMetalBonnie = true;
            if (unlockVariable == global.unlockedMetalChica) global.unlockedMetalChica = true;
            if (unlockVariable == global.unlockedMetalFoxy) global.unlockedMetalFoxy = true;
            if (unlockVariable == global.unlockedMetalFredbear) global.unlockedMetalFredbear = true;
            if (unlockVariable == global.unlockedMetalBalloonBoy) global.unlockedMetalBalloonBoy = true;
            if (unlockVariable == global.unlockedMetalMangle) global.unlockedMetalMangle = true;
            if (unlockVariable == global.unlockedMetalPuppet) global.unlockedMetalPuppet = true;
            if (unlockVariable == global.unlockedMetalPartyHat) global.unlockedMetalPartyHat = true;
            if (unlockVariable == global.unlockedMetalBalloon) global.unlockedMetalBalloon = true;
            if (unlockVariable == global.unlockedGooe) global.unlockedGooe = true;
            if (unlockVariable == global.unlockedAnnoyingDog) global.unlockedAnnoyingDog = true;
            if (unlockVariable == global.unlockedQuestionMark) global.unlockedQuestionMark = true;
            if (unlockVariable == global.unlockedPhantomFreddy) global.unlockedPhantomFreddy = true;
            if (unlockVariable == global.unlockedPhantomBonnie) global.unlockedPhantomBonnie = true;
            if (unlockVariable == global.unlockedPhantomChica) global.unlockedPhantomChica = true;
            if (unlockVariable == global.unlockedPhantomFoxy) global.unlockedPhantomFoxy = true;
            if (unlockVariable == global.unlockedPhantomFredbear) global.unlockedPhantomFredbear = true;
            if (unlockVariable == global.unlockedPhantomBalloonBoy) global.unlockedPhantomBalloonBoy = true;
            if (unlockVariable == global.unlockedPhantomMangle) global.unlockedPhantomMangle = true;
            if (unlockVariable == global.unlockedPhantomPuppet) global.unlockedPhantomPuppet = true;
            if (unlockVariable == global.unlockedSpringBonnie) global.unlockedSpringBonnie = true;
            if (unlockVariable == global.unlockedSpringtrap) global.unlockedSpringtrap = true;
            if (unlockVariable == global.unlockedPurpleMan) global.unlockedPurpleMan = true;
        }
        if (global.progression == progress) global.progression += 1;
        audio_stop_all();
        instance_destroy();
    }
}

//Clamp Hp

hp = clamp(hp,0,99999);

//Healthbar

hpBar = lerp(hpBar,hp,.1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarms

//Setup

if(alarm_Setup != -1)
{
    alarm_Setup = max(0,alarm_Setup-1);
    if(alarm_Setup == 0)
    {
        hp = hpMax;
        alarm_Setup = -1;
    }
}

//Disable Hurt

if(alarm_Hurt != -1)
{
    alarm_Hurt = max(0,alarm_Hurt-1);
    if(alarm_Hurt == 0)
    {
        hurt = false;
        alarm_Hurt = -1;
    }
}

//Phantom Particles

if(alarm_Particle != -1)
{
    alarm_Particle = max(0,alarm_Particle-1);
    if(alarm_Particle == 0)
    {
        var particle = instance_create(x,y,obj_PhantomParticles);
        particle.speed = irandom_range(6,9);
        particle.direction = irandom_range(0,359);
        alarm_Particle = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//Draw Self

draw_self();

//Healthbar

draw_sprite_ext(spr_Healthbar_Border,0,x - sprite_get_width(spr_Healthbar_Border)/2,y - (sprite_get_height(maskIndex)/2) - 24,1,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_Bg,0,x - sprite_get_width(spr_Healthbar_Bg)/2,y - (sprite_get_height(maskIndex)/2) - 24,1,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_InnerDark,2,x - sprite_get_width(spr_Healthbar_InnerDark)/2,y - (sprite_get_height(maskIndex)/2) - 24,hpBar/hpMax,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_Inner,2,x - sprite_get_width(spr_Healthbar_Inner)/2,y - (sprite_get_height(maskIndex)/2) - 24,hp/hpMax,1,image_angle,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
