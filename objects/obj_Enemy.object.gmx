<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Null</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Player_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Randomize

randomize();

//Physics

spd = random_range(1.5,3);
hsp = 0;
vsp = 0;

//Character Variables

character = 0;
sprLeft = spr_Null;
sprRight = spr_Null;
sprUp = spr_Null;
sprDown = spr_Null;
sprDeath = spr_Null;
talkSound = snd_Freddy_Gameplay1;
maskIndex = spr_Player_Mask;

//Other Variables

state = 0;
hp = 0;
hpMax = 3;
hpBar = hpMax;
knockbackResistance = .2;
hurt = false;
invisFrames = 30;
invisTimer = 0;
invisTimerIncrease = 10;
coinChance = 2;
owner = id;
clampX1 = 0;
clampX2 = room_width;
clampY1 = 0;
clampY2 = room_height;
state1RandomHsp = spd;
state1RandomVsp = spd;
state1Timer = 0;
state1TimerLimit = 120;
unlockVariable = global.unlockedMetalPartyHat;
unlockText = "Metal#Party Hat";

//Stands

standBurningMemory = false;
burningMemoryBalloonCount = 0;

//Alarms

alarm_Setup = 1;
alarm_Hurt = -1;
alarm_BurningMemoryTeleport = -1;
alarm_BurningMemoryBalloon = -1;
alarm_BurningMemoryEntireCircus = -1;
alarm_SpawnPortal = -1;

/*States

0 - Follow The Player
1 - Randomly Walk
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Characters

scr_Characters();

/*switch (character)
{
    //Freddy
    
    case(0):
    sprLeft = spr_Freddy_Left;
    sprRight = spr_Freddy_Right;
    sprUp = spr_Freddy_Up;
    sprDown = spr_Freddy_Down;
    sprDeath = spr_Freddy_Death;
    maskIndex = spr_Freddy_Down;
    break;
    
    //Bonnie
    
    case(1):
    sprLeft = spr_Bonnie_Left;
    sprRight = spr_Bonnie_Right;
    sprUp = spr_Bonnie_Up;
    sprDown = spr_Bonnie_Down;
    sprDeath = spr_Bonnie_Death;
    maskIndex = spr_Bonnie_Down;
    break;
    
    //Chica
    
    case(2):
    sprLeft = spr_Chica_Left;
    sprRight = spr_Chica_Right;
    sprUp = spr_Chica_Up;
    sprDown = spr_Chica_Down;
    sprDeath = spr_Chica_Death;
    maskIndex = spr_Chica_Down;
    break;
    
    //Foxy
    
    case(3):
    sprLeft = spr_Foxy_Left;
    sprRight = spr_Foxy_Right;
    sprUp = spr_Foxy_Up;
    sprDown = spr_Foxy_Down;
    sprDeath = spr_Foxy_Death;
    maskIndex = spr_Foxy_Down;
    break;
    
    //Fredbear
    
    case(4):
    sprLeft = spr_Fredbear_Left;
    sprRight = spr_Fredbear_Right;
    sprUp = spr_Fredbear_Up;
    sprDown = spr_Fredbear_Down;
    sprDeath = spr_Fredbear_Death;
    maskIndex = spr_Fredbear_Down;
    break;
    
    //Balloon Boy
    
    case(5):
    sprLeft = spr_BalloonBoy_Left;
    sprRight = spr_BalloonBoy_Right;
    sprUp = spr_BalloonBoy_Right;
    sprDown = spr_BalloonBoy_Right;
    sprDeath = spr_BalloonBoy_Death;
    maskIndex = spr_BalloonBoy_Right;
    break;    
    
    //Mangle
    
    case(6):
    sprLeft = spr_Mangle_Left;
    sprRight = spr_Mangle_Right;
    sprUp = spr_Mangle_Right;
    sprDown = spr_Mangle_Right;
    sprDeath = spr_Mangle_Death;
    maskIndex = spr_Mangle_Right;
    break;
    
    //Puppet
    
    case(7):
    sprLeft = spr_Puppet_Left;
    sprRight = spr_Puppet_Right;
    sprUp = spr_Puppet_Right;
    sprDown = spr_Puppet_Right;
    sprDeath = spr_Puppet_Death;
    maskIndex = spr_Puppet_Right;
    break;
    
    //Party Hat
    
    case(8):
    sprLeft = spr_PartyHat_Normal;
    sprRight = spr_PartyHat_Normal;
    sprUp = spr_PartyHat_Normal;
    sprDown = spr_PartyHat_Normal;
    sprDeath = spr_PartyHat_Death;
    maskIndex = spr_PartyHat_Normal;
    break;
    
    //Balloon
    
    case(9):
    sprLeft = spr_Balloon_Normal;
    sprRight = spr_Balloon_Normal;
    sprUp = spr_Balloon_Normal;
    sprDown = spr_Balloon_Normal;
    sprDeath = spr_Balloon_Death;
    maskIndex = spr_Balloon_Normal;
    break;
    
    //Metal Freddy
    
    case(10):
    sprLeft = spr_MetalFreddy_Left;
    sprRight = spr_MetalFreddy_Right;
    sprUp = spr_MetalFreddy_Up;
    sprDown = spr_MetalFreddy_Down;
    sprDeath = spr_MetalFreddy_Death;
    maskIndex = spr_MetalFreddy_Down;
    break;
    
    //Metal Metal Bonnie
    
    case(11):
    sprLeft = spr_MetalBonnie_Left;
    sprRight = spr_MetalBonnie_Right;
    sprUp = spr_MetalBonnie_Up;
    sprDown = spr_MetalBonnie_Down;
    sprDeath = spr_MetalBonnie_Death;
    maskIndex = spr_MetalBonnie_Down;
    break;
    
    //Metal Chica
    
    case(12):
    sprLeft = spr_MetalChica_Left;
    sprRight = spr_MetalChica_Right;
    sprUp = spr_MetalChica_Up;
    sprDown = spr_MetalChica_Down;
    sprDeath = spr_MetalChica_Death;
    maskIndex = spr_MetalChica_Down;
    break;
    
    //Metal Foxy
    
    case(13):
    sprLeft = spr_MetalFoxy_Left;
    sprRight = spr_MetalFoxy_Right;
    sprUp = spr_MetalFoxy_Up;
    sprDown = spr_MetalFoxy_Down;
    sprDeath = spr_MetalFoxy_Death;
    maskIndex = spr_MetalFoxy_Down;
    break;
    
    //Metal Fredbear
    
    case(14):
    sprLeft = spr_MetalFredbear_Left;
    sprRight = spr_MetalFredbear_Right;
    sprUp = spr_MetalFredbear_Up;
    sprDown = spr_MetalFredbear_Down;
    sprDeath = spr_MetalFredbear_Death;
    maskIndex = spr_MetalFredbear_Down;
    break;
    
    //Metal Balloon Boy
    
    case(15):
    sprLeft = spr_MetalBalloonBoy_Left;
    sprRight = spr_MetalBalloonBoy_Right;
    sprUp = spr_MetalBalloonBoy_Right;
    sprDown = spr_MetalBalloonBoy_Right;
    sprDeath = spr_MetalBalloonBoy_Death;
    maskIndex = spr_MetalBalloonBoy_Right;
    break;    
    
    //Metal Mangle
    
    case(16):
    sprLeft = spr_MetalMangle_Left;
    sprRight = spr_MetalMangle_Right;
    sprUp = spr_MetalMangle_Right;
    sprDown = spr_MetalMangle_Right;
    sprDeath = spr_MetalMangle_Death;
    maskIndex = spr_MetalMangle_Right;
    break;
    
    //Metal Puppet
    
    case(17):
    sprLeft = spr_MetalPuppet_Left;
    sprRight = spr_MetalPuppet_Right;
    sprUp = spr_MetalPuppet_Right;
    sprDown = spr_MetalPuppet_Right;
    sprDeath = spr_MetalPuppet_Death;
    maskIndex = spr_MetalPuppet_Right;
    break;
    
    //Metal Party Hat
    
    case(18):
    sprLeft = spr_MetalPartyHat_Normal;
    sprRight = spr_MetalPartyHat_Normal;
    sprUp = spr_MetalPartyHat_Normal;
    sprDown = spr_MetalPartyHat_Normal;
    sprDeath = spr_MetalPartyHat_Death;
    maskIndex = spr_MetalPartyHat_Normal;
    break;
    
    //Metal Balloon
    
    case(19):
    sprLeft = spr_MetalBalloon_Normal;
    sprRight = spr_MetalBalloon_Normal;
    sprUp = spr_MetalBalloon_Normal;
    sprDown = spr_MetalBalloon_Normal;
    sprDeath = spr_MetalBalloon_Death;
    maskIndex = spr_MetalBalloon_Normal;
    break;
    
    //Gooe
    
    case(20):
    sprLeft = spr_Gooe_Left;
    sprRight = spr_Gooe_Right;
    sprUp = spr_Gooe_Left;
    sprDown = spr_Gooe_Left;
    sprDeath = spr_Gooe_Death;
    maskIndex = spr_Gooe_Left;
    break;
    
    //Annoying Dog
    
    case(21):
    sprLeft = spr_AnnoyingDog_Left;
    sprRight = spr_AnnoyingDog_Right;
    sprUp = spr_AnnoyingDog_Up;
    sprDown = spr_AnnoyingDog_Down;
    sprDeath = spr_AnnoyingDog_Death;
    maskIndex = spr_AnnoyingDog_Down;
    break;
    
    //Question Mark
    
    case(22):
    sprLeft = spr_QuestionMark_Normal;
    sprRight = spr_QuestionMark_Normal;
    sprUp = spr_QuestionMark_Normal;
    sprDown = spr_QuestionMark_Normal;
    sprDeath = spr_QuestionMark_Death;
    maskIndex = spr_QuestionMark_Normal;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main

//Follow The Player

if (state == 0)
{
    if (instance_exists(obj_Player))
    {
        if (obj_Player.x &lt; x - spd) or (obj_Player.x &gt; x + spd)
        {
            if (obj_Player.x + spd &gt; x)
            {
                hsp = spd;
            }
            else if (obj_Player.x + spd &lt; x)
            {
                hsp = -spd;
            }
        }
        else
        {
            hsp = 0;
        }
        if (obj_Player.y &lt; y - spd) or (obj_Player.y &gt; y + spd)
        {
            if (obj_Player.y &gt; y + spd)
            {
                vsp = spd;
            }
            else if (obj_Player.y &lt; y + spd)
            {
                vsp = -spd;
            }
        }
        else
        {
            vsp = 0;
        }
    }
}

//Randomly Walk

if (state == 1)
{
    state1Timer += 1;
    
    if (state1Timer &gt; state1TimerLimit)
    {
        state1Timer -= state1TimerLimit;
        state1RandomHsp = random_range(-spd - 1, spd + 1);
        state1RandomVsp = random_range(-spd - 1, spd + 1);
        hsp = state1RandomHsp;
        vsp = state1RandomVsp;
    }
}

//Collision

if place_meeting(x+hsp,y,obj_Wall)
{
    while(!place_meeting(x+sign(hsp),y,obj_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    speed = 0;
}

if place_meeting(x,y+vsp,obj_Wall)
{
    while(!place_meeting(x,y+sign(vsp),obj_Wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    speed = 0;
}

//Speed Collision

if (place_meeting(x,y+speed,obj_Wall)) or (place_meeting(x+speed,y,obj_Wall))
{
    speed = 0;
}

//Animation

if hsp &lt; 0
{
    sprite_index = sprLeft;
}
if hsp &gt; 0
{
    sprite_index = sprRight;
}
if vsp &lt; 0
{
    sprite_index = sprUp;
}
if vsp &gt; 0
{
    sprite_index = sprDown;
}

if (hsp == 0 and vsp == 0)
{
    image_speed = 0;
    sprite_index = sprDown;
}
else
{
    image_speed = .1;
}

//Position

x += hsp;
y += vsp;

//Clamp

x = clamp(x,clampX1,clampX2);
y = clamp(y,clampY1,clampY2);
hp = clamp(hp,0,999);

//Knockback Resistance

friction = knockbackResistance;

//Hit

if (place_meeting(x,y,obj_DamagesEnemy))
{
    var bullet = instance_place(x,y,obj_DamagesEnemy);
    if (!hurt)
    {
        if (hp &gt; bullet.damage)
        {
            hp -= bullet.damage;
            audio_play_sound(snd_RobotHit,0,false);
            if ((instance_exists(obj_Camera)) and (instance_exists(obj_LevelControl))) obj_Camera.shake += 2 + round(obj_LevelControl.combo * .5);
            if (instance_exists(obj_LevelControl)) obj_LevelControl.decreaseTimer = 0;
        }
        else
        {
            audio_play_sound(snd_RobotHit,0,false);
            audio_play_sound(snd_EnemyDie,0,false);
            if (instance_exists(obj_Player))
            {
                talkSound = choose(obj_Player.talkSound1,obj_Player.talkSound2,obj_Player.talkSound3);
                if ((!audio_is_playing(talkSound)) and obj_Player.hasSound) audio_play_sound(talkSound,1,false);
            }
            if ((instance_exists(obj_Camera)) and (instance_exists(obj_LevelControl))) obj_Camera.shake += 4 + round(obj_LevelControl.combo * .5)
            var corpse = instance_create(x,y,obj_EnemyCorpse);
            corpse.sprite_index = sprDeath;
            corpse.depth = depth;
            if (instance_exists(owner))
            {
                if (owner != id) owner.alarm_SpawnTimer = irandom_range(owner.spawnTimerMin,owner.spawnTimerMax);
            }
            if (instance_exists(obj_EnemyWall)) obj_EnemyWall.alarm_Decrease = 0;
            if (instance_exists(obj_LevelControl))
            {
                obj_LevelControl.combo += 1;
                obj_LevelControl.decreaseTimer = 0;
                if (obj_LevelControl.combo &gt;= 3)
                {
                    var comboText = instance_create(x,y,obj_ComboText);
                    comboText.combo = obj_LevelControl.combo;
                }
            }
            var spawnCoin = irandom_range(0,coinChance);
            if (spawnCoin == 0) instance_create(x,y,obj_Fazcoin);
            if (standBurningMemory)
            {
                alarm_BurningMemoryEntireCircus = 0;
                alarm_BurningMemoryTeleport = 0;
                alarm_SpawnPortal = 0;
            }
            instance_destroy();
        }
        direction = point_direction(x,y,bullet.x,bullet.y) + 180;
        speed += bullet.knockback;
        hurt = true;
        invisFrames = bullet.invisFrames;
        alarm_Hurt = invisFrames;
        bullet.pierceCount -= 1;
    }
    if (bullet.destroyable)
    {
        if (bullet.pierceCount &lt;= 0) instance_destroy(bullet);
    }
}

//Hurt

if (hurt)
{
    invisTimer += invisTimerIncrease;
    if (invisTimer &lt;= 30)
    {
        image_alpha = 0;
    }
    if (invisTimer &gt; 30)
    {
        image_alpha = 1;
    }
    if (invisTimer &gt; 60) invisTimer -= 60;
}
else
{
    invisTimer = 0;
    image_alpha = 1;
}

//Healthbar

hpBar = lerp(hpBar,hp,.1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarms

//Setup

if(alarm_Setup != -1)
{
    alarm_Setup = max(0,alarm_Setup-1);
    if(alarm_Setup == 0)
    {
        hp = hpMax;
        state1RandomHsp = spd;
        state1RandomVsp = spd;
        var damageMask = instance_create(x,y,obj_DamagesPlayer);
        damageMask.enemyMask = true;
        damageMask.owner = id;
        damageMask.mask_index = maskIndex;
        alarm_Setup = -1;
    }
}

//Disable Hurt

if(alarm_Hurt != -1)
{
    alarm_Hurt = max(0,alarm_Hurt-1);
    if(alarm_Hurt == 0)
    {
        hurt = false;
        alarm_Hurt = -1;
    }
}

//Burning Memory Teleport

if(alarm_BurningMemoryTeleport != -1)
{
    alarm_BurningMemoryTeleport = max(0,alarm_BurningMemoryTeleport-1);
    if(alarm_BurningMemoryTeleport == 0)
    {
        if (instance_exists(obj_Player))
        {
            obj_Player.x = obj_Player.xstart;
            obj_Player.y = obj_Player.ystart;
        }
        audio_play_sound(snd_BurningMemoryShort,0,false);
        audio_play_sound(snd_BalloonBoy_Gameplay1,0,false);
        shockwave_create(x, y, -97, 0, 28, 512, 15, 18, 20, true, c_white, false);
        var standText = instance_create(x,y,obj_StandText);
        standText.text = "BURNING MEMORY";
        standText.spd = .01;
        alarm_BurningMemoryTeleport = -1;
    }
}

//Burning Memory Balloon

if(alarm_BurningMemoryBalloon != -1)
{
    alarm_BurningMemoryBalloon = max(0,alarm_BurningMemoryBalloon-1);
    if(alarm_BurningMemoryBalloon == 0)
    {
        burningMemoryBalloonCount += 1;
        if (burningMemoryBalloonCount &gt;= 5 + round((hpMax - hp)/5))
        {
            burningMemoryBalloonCount = 0;
            alarm_BurningMemoryTeleport = irandom_range(45,90);
        }
        var balloonPos = choose(0,1);
        if (balloonPos == 0) //Vertical
        {
            var balloonX = choose(x - 42, x + 42);
            var balloonY = irandom_range(y - 42, y + 42);
        }
        if (balloonPos == 1) //Horizontal
        {
            var balloonX = irandom_range(x - 42, x + 42);
            var balloonY = choose(y - 42, y + 42);
        }
        audio_play_sound(snd_BurningMemoryShort,0,false);
        shockwave_create(balloonX, balloonY, -97, 0, 28, 512, 15, 18, 20, true, c_white, false);
        instance_create(balloonX,balloonY,obj_BurningMemory_Projectile);
        alarm_BurningMemoryBalloon = 30 + round(hp/2) + round((hp/10) * 25);
    }
}

//Burning Memory Entire Circus

if(alarm_BurningMemoryEntireCircus != -1)
{
    alarm_BurningMemoryEntireCircus = max(0,alarm_BurningMemoryEntireCircus-1);
    if(alarm_BurningMemoryEntireCircus == 0)
    {
        audio_stop_all();
        x = xstart;
        y = ystart;
        audio_play_sound(snd_BurningMemory,0,false);
        shockwave_create(xstart, ystart, -97, 0, 28, 512, 10, 18, 20, true, c_white, false);
        shockwave_create(xstart, ystart, -97, 0, 56, 512, 5, 18, 20, true, c_white, false);
        var burningMemoryProj = instance_create(xstart,ystart,obj_BurningMemory_Projectile);
        burningMemoryProj.sprite_index = spr_Circus;
        burningMemoryProj.destroyableByWall = false;
        burningMemoryProj.image_xscale = 4;
        burningMemoryProj.image_yscale = 4;
        var standText = instance_create(x,y,obj_StandText);
        standText.text = "BURNING MEMORY";
        standText.description = "ENTIRE CIRCUS";
        standText.spd = .005;
        alarm_BurningMemoryEntireCircus = -1;
    }
}

//Spawn Portal

if(alarm_SpawnPortal != -1)
{
    alarm_SpawnPortal = max(0,alarm_SpawnPortal-1);
    if(alarm_SpawnPortal == 0)
    {
        if (instance_exists(obj_EnemySpawner_Level)) instance_destroy(obj_EnemySpawner_Level);
        var portal = instance_create(x,y,obj_Portal);
        portal.Room = rm_Credits;
        portal.b = 0.005;
        portal.text = "Demo Credits";
        var titleCard = instance_create(0,0,obj_LevelTitle);
        titleCard.levelOrder = "";
        titleCard.levelTitle = "";
        if (unlockVariable)
        {
            titleCard.levelDescription = "Success!!!";
        }
        else
        {
            titleCard.levelDescription = "Success!!!##!Unlocked " + string(unlockText) + "!";
            if (unlockVariable == global.unlockedFreddy) global.unlockedFreddy = true;
            if (unlockVariable == global.unlockedBonnie) global.unlockedBonnie = true;
            if (unlockVariable == global.unlockedChica) global.unlockedChica = true;
            if (unlockVariable == global.unlockedFoxy) global.unlockedFoxy = true;
            if (unlockVariable == global.unlockedFredbear) global.unlockedFredbear = true;
            if (unlockVariable == global.unlockedBalloonBoy) global.unlockedBalloonBoy = true;
            if (unlockVariable == global.unlockedMangle) global.unlockedMangle = true;
            if (unlockVariable == global.unlockedPuppet) global.unlockedPuppet = true;
            if (unlockVariable == global.unlockedPartyHat) global.unlockedPartyHat = true;
            if (unlockVariable == global.unlockedBalloon) global.unlockedBalloon = true;
            if (unlockVariable == global.unlockedMetalFreddy) global.unlockedMetalFreddy = true;
            if (unlockVariable == global.unlockedMetalBonnie) global.unlockedMetalBonnie = true;
            if (unlockVariable == global.unlockedMetalChica) global.unlockedMetalChica = true;
            if (unlockVariable == global.unlockedMetalFoxy) global.unlockedMetalFoxy = true;
            if (unlockVariable == global.unlockedMetalFredbear) global.unlockedMetalFredbear = true;
            if (unlockVariable == global.unlockedMetalBalloonBoy) global.unlockedMetalBalloonBoy = true;
            if (unlockVariable == global.unlockedMetalMangle) global.unlockedMetalMangle = true;
            if (unlockVariable == global.unlockedMetalPuppet) global.unlockedMetalPuppet = true;
            if (unlockVariable == global.unlockedMetalPartyHat) global.unlockedMetalPartyHat = true;
            if (unlockVariable == global.unlockedMetalBalloon) global.unlockedMetalBalloon = true;
            if (unlockVariable == global.unlockedGooe) global.unlockedGooe = true;
            if (unlockVariable == global.unlockedAnnoyingDog) global.unlockedAnnoyingDog = true;
            if (unlockVariable == global.unlockedQuestionMark) global.unlockedQuestionMark = true;
            if (unlockVariable == global.unlockedPhantomFreddy) global.unlockedPhantomFreddy = true;
            if (unlockVariable == global.unlockedPhantomBonnie) global.unlockedPhantomBonnie = true;
            if (unlockVariable == global.unlockedPhantomChica) global.unlockedPhantomChica = true;
            if (unlockVariable == global.unlockedPhantomFoxy) global.unlockedPhantomFoxy = true;
            if (unlockVariable == global.unlockedPhantomFredbear) global.unlockedPhantomFredbear = true;
            if (unlockVariable == global.unlockedPhantomBalloonBoy) global.unlockedPhantomBalloonBoy = true;
            if (unlockVariable == global.unlockedPhantomMangle) global.unlockedPhantomMangle = true;
            if (unlockVariable == global.unlockedPhantomPuppet) global.unlockedPhantomPuppet = true;
            if (unlockVariable == global.unlockedSpringBonnie) global.unlockedSpringBonnie = true;
            if (unlockVariable == global.unlockedSpringtrap) global.unlockedSpringtrap = true;
            if (unlockVariable == global.unlockedPurpleMan) global.unlockedPurpleMan = true;
        }
        if (global.progression == progress) global.progression += 1;
        alarm_SpawnPortal = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//Draw Self

draw_self();

//Healthbar

draw_sprite_ext(spr_Healthbar_Border,0,x - sprite_get_width(spr_Healthbar_Border)/2,y - (sprite_get_height(maskIndex)/2) - 12,1,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_Bg,0,x - sprite_get_width(spr_Healthbar_Bg)/2,y - (sprite_get_height(maskIndex)/2) - 12,1,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_InnerDark,0,x - sprite_get_width(spr_Healthbar_InnerDark)/2,y - (sprite_get_height(maskIndex)/2) - 12,hpBar/hpMax,1,image_angle,image_blend,image_alpha);
draw_sprite_ext(spr_Healthbar_Inner,0,x - sprite_get_width(spr_Healthbar_Inner)/2,y - (sprite_get_height(maskIndex)/2) - 12,hp/hpMax,1,image_angle,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
